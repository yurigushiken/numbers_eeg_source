def run_label_timecourse_cluster_test(stcs, fsaverage_src, config):
    """
    Run a 1D time-cluster permutation test on label-averaged time courses.

    - Extract label time courses on fsaverage with mode='mean_flip'.
    - Average across specified labels to one ROI time course per subject.
    - Crop to YAML tmin/tmax and cluster across time.
    """
    import mne
    log.info("Preparing label-averaged time courses for clustering...")

    lt_cfg = config['stats'].get('label_timeseries', {})
    parc = lt_cfg.get('parc', 'aparc')
    labels_wanted = lt_cfg.get('labels') or config['stats'].get('roi', {}).get('labels', [])
    if not labels_wanted:
        raise ValueError("No labels provided for label time-series test (stats.label_timeseries.labels).")
    labels_wanted = [s.lower() for s in labels_wanted]

    from pathlib import Path
    project_root = Path(__file__).resolve().parents[2]
    subjects_dir = _resolve_fs_subjects_dir(project_root)
    all_labels = mne.read_labels_from_annot('fsaverage', parc=parc, subjects_dir=subjects_dir, verbose=False)
    def base_name(name: str) -> str:
        name = name.lower()
        if name.endswith('-lh') or name.endswith('-rh'):
            return name[:-3]
        return name
    selected_labels = [lab for lab in all_labels if base_name(lab.name) in labels_wanted]
    if not selected_labels:
        raise ValueError("Selected labels not found on fsaverage. Check parc and label names.")

    # Build (n_subjects, n_times) matrix
    X = []
    for stc in stcs:
        ltc = mne.extract_label_time_course(
            stc, selected_labels, src=fsaverage_src, mode='mean_flip', allow_empty=True, verbose=False
        )  # shape (n_labels, n_times)
        ts = ltc.mean(axis=0)
        X.append(ts)
    X = np.vstack(X)  # (n_subjects, n_times)

    # Build time crop
    times = stcs[0].times
    aw = (config.get('stats') or {}).get('analysis_window')
    if aw and len(aw) == 2:
        tmin = float(aw[0])
        tmax = float(aw[1])
        log.info(f"Label time-series: analysis_window {tmin:.3f}-{tmax:.3f}s")
    else:
        tmin = float(times[0])
        tmax = float(times[-1])
    time_mask = (times >= tmin) & (times <= tmax)
    if time_mask.sum() == 0:
        log.warning("Time mask is empty for label TS; using full window.")
        time_mask = slice(None)
        times_c = times
        X_c = X
    else:
        times_c = times[time_mask]
        X_c = X[:, time_mask]

    # Compute signed threshold
    n_subjects = X_c.shape[0]
    dof = n_subjects - 1
    p_threshold = config['stats']['p_threshold']
    tail = int(config['stats']['tail'])
    if tail == 0:
        thr = t_dist.ppf(1.0 - p_threshold / 2., df=dof)
    else:
        thr = t_dist.ppf(1.0 - p_threshold, df=dof)
        thr = -abs(thr) if tail < 0 else abs(thr)
    log.info(
        f"Running 1D time clustering over labels {labels_wanted} with threshold {thr:.3f}, "
        f"n_permutations={config['stats']['n_permutations']}, tail={tail}"
    )

    # 1D cluster test over time
    stat_results = mne.stats.permutation_cluster_1samp_test(
        X_c, threshold=thr, tail=tail, n_permutations=config['stats']['n_permutations'],
        out_type='mask', verbose=True
    )

    return stat_results, times_c, X_c.mean(axis=0), [lab.name for lab in selected_labels]