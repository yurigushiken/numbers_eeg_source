    # --- 5. Run Group-Level Cluster Statistics (on full-resolution data) ---
    stats_results = cluster_stats.run_source_cluster_test(all_source_contrasts_for_stats, fsaverage_src, config)

    # If no significant clusters, optionally run label time-course clustering for sensitivity
    try:
        t_obs, clusters, cluster_p_values, _ = stats_results
        if not (cluster_p_values < config['stats']['cluster_alpha']).any():
            if 'label_timeseries' in config['stats']:
                log.info("Primary source clustering null; running label time-course 1D clustering...")
                lt_results = cluster_stats.run_label_timecourse_cluster_test(
                    all_source_contrasts_for_stats, fsaverage_src, config
                )
                # Store auxiliary results for potential report use
                aux_dir = output_dir / "aux"
                aux_dir.mkdir(exist_ok=True)
                np.save(aux_dir / "label_times.npy", lt_results[1])
                np.save(aux_dir / "label_mean_ts.npy", lt_results[2])
                (aux_dir / "labels.txt").write_text("\n".join(lt_results[3]))

                # Also write a concise textual summary of significant label time clusters
                try:
                    lt_t_obs, lt_clusters, lt_cluster_p, _ = lt_results[0]
                    lt_times = lt_results[1]
                    alpha = float(config['stats']['cluster_alpha'])
                    lines = [
                        f"n_subjects={len(all_source_contrasts_for_stats)}; window={lt_times[0]:.3f}-{lt_times[-1]:.3f}s; "
                        f"tail={int(config['stats']['tail'])}; threshold computed from p_threshold={config['stats']['p_threshold']}"
                    ]
                    sig_any = False
                    for idx, pval in enumerate(lt_cluster_p):
                        if pval < alpha:
                            sig_any = True
                            mask = lt_clusters[idx]
                            t_inds = np.where(mask)[0]
                            if t_inds.size == 0:
                                continue
                            tmin_ms = float(lt_times[t_inds.min()] * 1000.0)
                            tmax_ms = float(lt_times[t_inds.max()] * 1000.0)
                            vals = lt_t_obs[t_inds]
                            peak_i = int(np.abs(vals).argmax())
                            peak_ms = float(lt_times[t_inds[peak_i]] * 1000.0)
                            lines.append(
                                f"ROI combined: SIGNIFICANT time cluster p={pval:.4f} at {tmin_ms:.1f}-{tmax_ms:.1f} ms, "
                                f"peak at {peak_ms:.1f} ms"
                            )
                    if not sig_any:
                        lines.append("No significant label time-series clusters at cluster_alpha=%.3f" % alpha)
                    (aux_dir / "label_cluster_summary.txt").write_text("\n".join(lines))
                except Exception as e:
                    log.warning(f"Failed to write label time-series summary: {e}")
    except Exception as e:
        log.warning(f"Label time-course fallback failed: {e}")

